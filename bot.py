import os
import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from fastapi import FastAPI
import uvicorn
from gtts import gTTS

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
WEBHOOK_URL = "https://fenix-bot-3w3i.onrender.com/webhook"

bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()
app = FastAPI()

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
def generate_voice(text, lang="uk"):
    try:
        tts = gTTS(text=text, lang=lang, slow=False)
        audio_path = "response.mp3"
        tts.save(audio_path)
        print(f"[LOG] –ì–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {audio_path}")
        return audio_path
    except Exception as e:
        print(f"[ERROR] –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≥–æ–ª–æ—Å—É: {e}")
        return None

# Webhook
@app.post("/webhook")
async def webhook(update: dict):
    try:
        telegram_update = types.Update(**update)
        await dp.feed_update(bot, telegram_update)
        print("[LOG] Webhook –æ—Ç—Ä–∏–º–∞–≤ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è:", update)
        return {"status": "ok"}
    except Exception as e:
        print(f"[ERROR] Webhook –ø–æ–º–∏–ª–∫–∞: {e}")
        return {"status": "error"}

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start_command(message: Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ñ—ñ–Ω–æ—á–∏–π –≥–æ–ª–æ—Å üîä")]],
        resize_keyboard=True,
    )
    await message.answer("üî• –ü—Ä–∏–≤—ñ—Ç! –ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —ñ —è –≤—ñ–¥–ø–æ–≤—ñ–º –≥–æ–ª–æ—Å–æ–º!", reply_markup=keyboard)

# –û–±—Ä–æ–±–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
@dp.message()
async def handle_voice(message: Message):
    if message.voice:
        file_info = await bot.get_file(message.voice.file_id)
        file_path = file_info.file_path
        downloaded_file = await bot.download_file(file_path)
        local_audio = "input.ogg"

        with open(local_audio, "wb") as f:
            f.write(downloaded_file.read())

        # –ì–µ–Ω–µ—Ä—É—î–º–æ –≥–æ–ª–æ—Å–æ–≤—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        audio_response = generate_voice("–ü—Ä–∏–≤—ñ—Ç! –¶–µ —Ç–µ—Å—Ç–æ–≤–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å.")

        if audio_response:
            with open(audio_response, "rb") as audio:
                await message.answer_voice(types.InputFile(audio_response))
        else:
            await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≥–æ–ª–æ—Å—É!")

# –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
async def main():
    await bot.set_webhook(WEBHOOK_URL)
    uvicorn.run(app, host="0.0.0.0", port=8000)

if __name__ == "__main__":
    asyncio.run(main())
