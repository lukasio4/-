import os
import logging
import asyncio
import random
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from fastapi import FastAPI
import uvicorn
from openai import OpenAI
from elevenlabs import ElevenLabs

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ (API-–∫–ª—é—á—ñ)
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
ELEVENLABS_API_KEY = os.getenv("ELEVENLABS_API_KEY")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
WEBHOOK_URL = f"https://fenix-bot-3w3i.onrender.com/webhook"

bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()
app = FastAPI()

# –î–æ—Å—Ç—É–ø–Ω—ñ –≥–æ–ª–æ—Å–∏
VOICES = {"male": "Adam", "female": "Bella"}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ GPT
async def get_gpt_response(text):
    try:
        client = OpenAI(api_key=OPENAI_API_KEY)
        response = client.chat.completions.create(
            model="gpt-4",
            messages=[{"role": "user", "content": text}]
        )
        return response.choices[0].message['content']
    except Exception as e:
        print(f"[ERROR] GPT –ü–æ–º–∏–ª–∫–∞: {e}")
        return "–Ø –Ω–µ –∑–º—ñ–≥ –ø—Ä–∏–¥—É–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å üòî"

# –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≥–æ–ª–æ—Å—É
async def generate_voice(text, gender="female"):
    try:
        voice = VOICES.get(gender, "Bella")
        elevenlabs_client = ElevenLabs(api_key=ELEVENLABS_API_KEY)
        audio = elevenlabs_client.text_to_speech.convert(text=text, voice=voice)

        audio_path = "response.mp3"
        with open(audio_path, "wb") as f:
            f.write(audio)

        print(f"[LOG] –ì–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {audio_path}")
        return audio_path
    except Exception as e:
        print(f"[ERROR] –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≥–æ–ª–æ—Å—É: {e}")
        return None

@app.post("/webhook")
async def webhook(update: dict):
    try:
        telegram_update = types.Update(**update)
        await dp.feed_update(bot, telegram_update)
        print("[LOG] Webhook –æ—Ç—Ä–∏–º–∞–≤ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è:", update)
        return {"status": "ok"}
    except Exception as e:
        print(f"[ERROR] Webhook –ø–æ–º–∏–ª–∫–∞: {e}")
        return {"status": "error"}

@dp.message(Command("start"))
async def start_command(message: Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ñ—ñ–Ω–æ—á–∏–π", callback_data="voice_female"),
         InlineKeyboardButton(text="–ß–æ–ª–æ–≤—ñ—á–∏–π", callback_data="voice_male")]
    ])
    await message.answer("üî• –ü—Ä–∏–≤—ñ—Ç! –ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —ñ —è –≤—ñ–¥–ø–æ–≤—ñ–º –≥–æ–ª–æ—Å–æ–º!\n\n–í–∏–±–µ—Ä–∏ —Ç–∏–ø –≥–æ–ª–æ—Å—É:", reply_markup=keyboard)

@dp.callback_query()
async def set_voice_preference(callback: types.CallbackQuery):
    user_choice = callback.data.split("_")[1]
    await callback.answer(f"–í–∏ –æ–±—Ä–∞–ª–∏ {user_choice} –≥–æ–ª–æ—Å!")
    await callback.message.answer("–¢–µ–ø–µ—Ä –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è!")

@dp.message()
async def handle_voice(message: Message):
    if message.voice:
        file_info = await bot.get_file(message.voice.file_id)
        file_path = file_info.file_path
        downloaded_file = await bot.download_file(file_path)
        local_audio = "input.ogg"
        with open(local_audio, "wb") as f:
            f.write(downloaded_file.read())

        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ GPT
        gpt_response = await get_gpt_response("–©–æ —Å–∫–∞–∑–∞—Ç–∏ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å?")

        # –ì–µ–Ω–µ—Ä—É—î–º–æ –≥–æ–ª–æ—Å–æ–≤—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        audio_response = await generate_voice(gpt_response, gender="female")

        if audio_response:
            with open(audio_response, "rb") as audio:
                await message.answer_voice(audio)
        else:
            await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≥–æ–ª–æ—Å—É!")

async def main():
    await bot.set_webhook(WEBHOOK_URL)
    uvicorn.run(app, host="0.0.0.0", port=8000)

if __name__ == "__main__":
    asyncio.run(main())
