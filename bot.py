import os
import logging
import asyncio
import json
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from fastapi import FastAPI
import uvicorn

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
ELEVENLABS_API_KEY = os.getenv("ELEVENLABS_API_KEY")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
WEBHOOK_URL = "https://fenix-bot-3w3i.onrender.com/webhook"

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —Ç–∞ FastAPI
bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()
app = FastAPI()

# –í–∞—Ä—ñ–∞–Ω—Ç–∏ –≥–æ–ª–æ—Å—ñ–≤
VOICES = {"female": "–í—ñ—Ä–∞", "male": "–û–ª–µ–∫—Å—ñ–π –ù–µ–∫—Ä–∞—Å–æ–≤"}
user_voice_preferences = {}

# –§—É–Ω–∫—Ü—ñ—è –≤–∏–∫–ª–∏–∫—É OpenAI GPT-3.5
async def get_gpt_response(prompt):
    url = "https://api.openai.com/v1/chat/completions"
    headers = {"Authorization": f"Bearer {OPENAI_API_KEY}", "Content-Type": "application/json"}
    data = {
        "model": "gpt-3.5-turbo",
        "messages": [{"role": "system", "content": "–¢–∏ –≤–µ—Å–µ–ª–∏–π AI, —è–∫–∏–π –∂–∞—Ä—Ç—É—î"},
                     {"role": "user", "content": prompt}]
    }
    response = requests.post(url, headers=headers, json=data)
    if response.status_code == 200:
        return response.json()["choices"][0]["message"]["content"].strip()
    else:
        return "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å GPT."

# –§—É–Ω–∫—Ü—ñ—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≥–æ–ª–æ—Å—É
async def generate_voice(text, user_id):
    voice = user_voice_preferences.get(user_id, "female")
    selected_voice = VOICES.get(voice, "–í—ñ—Ä–∞")
    
    url = "https://api.elevenlabs.io/v1/text-to-speech"
    headers = {"xi-api-key": ELEVENLABS_API_KEY, "Content-Type": "application/json"}
    payload = {"text": text, "voice": selected_voice}
    
    response = requests.post(url, headers=headers, json=payload)
    if response.status_code == 200:
        audio_path = "response.mp3"
        with open(audio_path, "wb") as f:
            f.write(response.content)
        return audio_path
    else:
        return None

# Webhook –ø—Ä–∏–π–º–∞—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥ Telegram
@app.post("/webhook")
async def webhook(update: dict):
    telegram_update = types.Update(**update)
    await dp.feed_update(bot, telegram_update)
    return {"status": "ok"}

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ —Å—Ç–∞—Ä—Ç
@dp.message(Command("start"))
async def start_command(message: Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ñ—ñ–Ω–æ—á–∏–π", callback_data="voice_female"),
         InlineKeyboardButton(text="–ß–æ–ª–æ–≤—ñ—á–∏–π", callback_data="voice_male")]
    ])
    await message.answer("üî• –ü—Ä–∏–≤—ñ—Ç! –ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —ñ —è –≤—ñ–¥–ø–æ–≤—ñ–º –≥–æ–ª–æ—Å–æ–º!\n\n–í–∏–±–µ—Ä–∏ —Ç–∏–ø –≥–æ–ª–æ—Å—É:", reply_markup=keyboard)

# –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ –≤–∏–±–æ—Ä—É –≥–æ–ª–æ—Å—É
@dp.callback_query()
async def voice_selection(callback: types.CallbackQuery):
    if callback.data == "voice_female":
        user_voice_preferences[callback.from_user.id] = "female"
        await callback.message.answer("–í–∏ –≤–∏–±—Ä–∞–ª–∏ –∂—ñ–Ω–æ—á–∏–π –≥–æ–ª–æ—Å.")
    elif callback.data == "voice_male":
        user_voice_preferences[callback.from_user.id] = "male"
        await callback.message.answer("–í–∏ –≤–∏–±—Ä–∞–ª–∏ —á–æ–ª–æ–≤—ñ—á–∏–π –≥–æ–ª–æ—Å.")
    await callback.answer()

# –û–±—Ä–æ–±–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
@dp.message()
async def handle_voice(message: Message):
    if message.voice:
        file_info = await bot.get_file(message.voice.file_id)
        file_path = file_info.file_path
        downloaded_file = await bot.download_file(file_path)
        local_audio = "input.ogg"
        with open(local_audio, "wb") as f:
            f.write(downloaded_file.read())

        gpt_response = await get_gpt_response("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞–¥—ñ—Å–ª–∞–≤ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –π–æ–º—É –≤–µ—Å–µ–ª–æ.")
        audio_response = await generate_voice(gpt_response, message.from_user.id)

        if audio_response:
            with open(audio_response, "rb") as audio:
                await message.answer_voice(types.InputFile(audio))
        else:
            await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≥–æ–ª–æ—Å—É!")

# –ó–∞–ø—É—Å–∫
async def main():
    await bot.set_webhook(WEBHOOK_URL)
    uvicorn.run(app, host="0.0.0.0", port=8000)

if __name__ == "__main__":
    asyncio.run(main())


