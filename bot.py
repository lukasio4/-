import os
import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from fastapi import FastAPI
import uvicorn
from gtts import gTTS

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
WEBHOOK_URL = f"https://—Ç–≤—ñ–π-–¥–æ–º–µ–Ω.com/webhook"  # –ó–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω–∏–π HTTPS-–¥–æ–º–µ–Ω

if not TELEGRAM_BOT_TOKEN:
    raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")

bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()
app = FastAPI()

# –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≥–æ–ª–æ—Å—É
async def text_to_speech(text: str, chat_id: int):
    try:
        tts = gTTS(text=text, lang='uk')
        filename = f"voice_{chat_id}.mp3"
        tts.save(filename)
        return filename
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≥–æ–ª–æ—Å—É: {e}")
        return None

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start
@dp.message()
async def start_handler(message: Message):
    await message.answer("üî• –ü—Ä–∏–≤—ñ—Ç! –ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ —Ç–µ–∫—Å—Ç, —ñ —è –π–æ–≥–æ –æ–∑–≤—É—á—É!")

# –û–±—Ä–æ–±–Ω–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
@dp.message()
async def text_handler(message: Message):
    chat_id = message.chat.id
    text = message.text
    
    voice_file = await text_to_speech(text, chat_id)
    
    if voice_file:
        with open(voice_file, "rb") as audio:
            await bot.send_voice(chat_id, audio)
        os.remove(voice_file)
    else:
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≥–æ–ª–æ—Å—É!")

# –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–µ–±—Ö—É–∫–∞
@app.on_event("startup")
async def on_startup():
    await bot.set_webhook(WEBHOOK_URL)

@app.post("/webhook")
async def webhook_handler(update: dict):
    telegram_update = types.Update(**update)
    await dp.feed_update(bot, telegram_update)

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)
