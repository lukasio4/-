import os
import requests
import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from fastapi import FastAPI
import uvicorn

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ (API-–∫–ª—é—á—ñ)
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
ELEVENLABS_API_KEY = os.getenv("ELEVENLABS_API_KEY")
WEBHOOK_URL = f"https://fenix-bot-3w3i.onrender.com/webhook"

# Voice IDs –¥–ª—è –≤–∏–±–æ—Ä—É –≥–æ–ª–æ—Å—É
VOICE_IDS = {
    "–ñ—ñ–Ω–æ—á–∏–π": "nCqaTnIbLdME87OuQaZY",  # –í—ñ—Ä–∞
    "–ß–æ–ª–æ–≤—ñ—á–∏–π": "9Sj8ugvpK1DmcAXyvi3a"  # –û–ª–µ–∫—Å—ñ–π –ù–µ–∫—Ä–∞—Å–æ–≤
}

bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()
app = FastAPI()

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤–∏–±–æ—Ä—É –≥–æ–ª–æ—Å—É
user_voice_choice = {}


# –§—É–Ω–∫—Ü—ñ—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≥–æ–ª–æ—Å—É
def generate_voice(text, voice_type="–ñ—ñ–Ω–æ—á–∏–π"):
    try:
        voice_id = VOICE_IDS.get(voice_type, VOICE_IDS["–ñ—ñ–Ω–æ—á–∏–π"])  # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –∂—ñ–Ω–æ—á–∏–π –≥–æ–ª–æ—Å
        url = f"https://api.elevenlabs.io/v1/text-to-speech/{voice_id}"

        headers = {
            "xi-api-key": ELEVENLABS_API_KEY,
            "Content-Type": "application/json"
        }

        data = {
            "text": text,
            "model_id": "eleven_multilingual_v1"
        }

        response = requests.post(url, json=data, headers=headers)

        if response.status_code == 200:
            audio_path = "response.mp3"
            with open(audio_path, "wb") as f:
                f.write(response.content)
            return audio_path
        else:
            logging.error(f"[ERROR] –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≥–æ–ª–æ—Å—É: {response.text}")
            return None
    except Exception as e:
        logging.error(f"[ERROR] –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        return None


@app.post("/webhook")
async def webhook(update: dict):
    try:
        telegram_update = types.Update(**update)
        await dp.feed_update(bot, telegram_update)
        logging.info(f"[LOG] Webhook –æ—Ç—Ä–∏–º–∞–≤ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {update}")
        return {"status": "ok"}
    except Exception as e:
        logging.error(f"[ERROR] Webhook –ø–æ–º–∏–ª–∫–∞: {e}")
        return {"status": "error"}


@dp.message(Command("start"))
async def start_command(message: Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ñ—ñ–Ω–æ—á–∏–π"), KeyboardButton(text="–ß–æ–ª–æ–≤—ñ—á–∏–π")]
        ],
        resize_keyboard=True
    )
    await message.answer("üî• –ü—Ä–∏–≤—ñ—Ç! –ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —ñ —è –≤—ñ–¥–ø–æ–≤—ñ–º –≥–æ–ª–æ—Å–æ–º!\n\n–í–∏–±–µ—Ä–∏ —Ç–∏–ø –≥–æ–ª–æ—Å—É:", reply_markup=keyboard)


@dp.message()
async def handle_voice(message: Message):
    if message.text in VOICE_IDS:
        user_voice_choice[message.from_user.id] = message.text
        await message.answer(f"‚úÖ –ì–æ–ª–æ—Å –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {message.text}! –ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
        return

    if message.voice:
        file_info = await bot.get_file(message.voice.file_id)
        file_path = file_info.file_path
        downloaded_file = await bot.download_file(file_path)
        local_audio = "input.ogg"
        with open(local_audio, "wb") as f:
            f.write(downloaded_file.read())

        # –û—Ç—Ä–∏–º—É—î–º–æ –≤–∏–±—ñ—Ä –≥–æ–ª–æ—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ —Å—Ç–∞–≤–∏–º–æ –∂—ñ–Ω–æ—á–∏–π –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        voice_type = user_voice_choice.get(message.from_user.id, "–ñ—ñ–Ω–æ—á–∏–π")

        # –ì–µ–Ω–µ—Ä—É—î–º–æ –≥–æ–ª–æ—Å–æ–≤—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        audio_response = generate_voice("–ü—Ä–∏–≤—ñ—Ç! –¶–µ —Ç–µ—Å—Ç–æ–≤–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å.", voice_type)

        if audio_response:
            with open(audio_response, "rb") as audio:
                await message.answer_voice(audio)
        else:
            await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≥–æ–ª–æ—Å—É!")


async def main():
    await bot.set_webhook(WEBHOOK_URL)
    uvicorn.run(app, host="0.0.0.0", port=8000)


if __name__ == "__main__":
    asyncio.run(main())
