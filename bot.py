import os
import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from fastapi import FastAPI
import uvicorn
import requests

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
ELEVENLABS_API_KEY = os.getenv("ELEVENLABS_API_KEY")
WEBHOOK_URL = "https://fenix-bot-3w3i.onrender.com/webhook"

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()
app = FastAPI()

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤–∏–±–æ—Ä—É –≥–æ–ª–æ—Å—É
user_voice_preference = {}

# –§—É–Ω–∫—Ü—ñ—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≥–æ–ª–æ—Å—É
def generate_voice(text, user_id):
    try:
        voice_id = user_voice_preference.get(user_id, "nCqaTnIbLdME87OuQaZY")  # –í—ñ—Ä–∞ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        url = "https://api.elevenlabs.io/v1/text-to-speech/" + voice_id
        headers = {
            "xi-api-key": ELEVENLABS_API_KEY,
            "Content-Type": "application/json"
        }
        data = {
            "text": text
        }
        response = requests.post(url, json=data, headers=headers)
        
        if response.status_code == 200:
            audio_path = "response.mp3"
            with open(audio_path, "wb") as f:
                f.write(response.content)
            logging.info(f"[LOG] –ì–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {audio_path}")
            return audio_path
        else:
            logging.error(f"[ERROR] –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≥–æ–ª–æ—Å—É: {response.text}")
            return None
    except Exception as e:
        logging.error(f"[ERROR] –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≥–æ–ª–æ—Å—É: {e}")
        return None

@app.post("/webhook")
async def webhook(update: dict):
    try:
        telegram_update = types.Update(**update)
        await dp.feed_update(bot, telegram_update)
        return {"status": "ok"}
    except Exception as e:
        logging.error(f"[ERROR] Webhook –ø–æ–º–∏–ª–∫–∞: {e}")
        return {"status": "error"}

@dp.message(Command("start"))
async def start_command(message: Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ñ—ñ–Ω–æ—á–∏–π", callback_data="voice_female"),
         InlineKeyboardButton(text="–ß–æ–ª–æ–≤—ñ—á–∏–π", callback_data="voice_male")]
    ])
    await message.answer("üî• –ü—Ä–∏–≤—ñ—Ç! –ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —ñ —è –≤—ñ–¥–ø–æ–≤—ñ–º –≥–æ–ª–æ—Å–æ–º!\n\n–í–∏–±–µ—Ä–∏ —Ç–∏–ø –≥–æ–ª–æ—Å—É:", reply_markup=keyboard)

@dp.callback_query()
async def set_voice_preference(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    if callback_query.data == "voice_female":
        user_voice_preference[user_id] = "nCqaTnIbLdME87OuQaZY"  # –í—ñ—Ä–∞
        await callback_query.message.answer("‚úÖ –ì–æ–ª–æ—Å –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ –ñ—ñ–Ω–æ—á–∏–π! –ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
    elif callback_query.data == "voice_male":
        user_voice_preference[user_id] = "9Sj8ugvpK1DmcAXyvi3a"  # –û–ª–µ–∫—Å—ñ–π –ù–µ–∫—Ä–∞—Å–æ–≤
        await callback_query.message.answer("‚úÖ –ì–æ–ª–æ—Å –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ –ß–æ–ª–æ–≤—ñ—á–∏–π! –ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
    await callback_query.answer()

@dp.message()
async def handle_voice(message: Message):
    user_id = message.from_user.id
    if message.voice:
        file_info = await bot.get_file(message.voice.file_id)
        file_path = file_info.file_path
        downloaded_file = await bot.download_file(file_path)
        local_audio = "input.ogg"
        with open(local_audio, "wb") as f:
            f.write(downloaded_file.read())

        audio_response = generate_voice("–ü—Ä–∏–≤—ñ—Ç! –¶–µ —Ç–µ—Å—Ç–æ–≤–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å.", user_id)

        if audio_response:
            from aiogram.types import FSInputFile

voice = FSInputFile(audio_response)  # –ü–µ—Ä–µ–¥–∞—î–º–æ —Ñ–∞–π–ª —è–∫ FSInputFile
await message.answer_voice(voice)

        else:
            await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≥–æ–ª–æ—Å—É!")

async def main():
    await bot.set_webhook(WEBHOOK_URL)
    uvicorn.run(app, host="0.0.0.0", port=8000)

if __name__ == "__main__":
    asyncio.run(main())
