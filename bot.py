import os
import logging
import asyncio
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from fastapi import FastAPI
import uvicorn
from openai import OpenAI

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
ELEVENLABS_API_KEY = os.getenv("ELEVENLABS_API_KEY")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
WEBHOOK_URL = "https://fenix-bot-3w3i.onrender.com/webhook"

bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()
app = FastAPI()

# –°–ø–∏—Å–æ–∫ –≥–æ–ª–æ—Å—ñ–≤
VOICES = {
    "–ñ—ñ–Ω–æ—á–∏–π": "nCqaTnIbLdME87OuQaZY",  # –í—ñ—Ä–∞
    "–ß–æ–ª–æ–≤—ñ—á–∏–π": "9Sj8ugvpK1DmcAXyvi3a"  # –û–ª–µ–∫—Å—ñ–π –ù–µ–∫—Ä–∞—Å–æ–≤
}

# –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
user_voice_preferences = {}

# –§—É–Ω–∫—Ü—ñ—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≥–æ–ª–æ—Å—É

def generate_voice(user_id, text):
    try:
        voice_id = user_voice_preferences.get(user_id, "nCqaTnIbLdME87OuQaZY")  # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –∂—ñ–Ω–æ—á–∏–π
        url = f"https://api.elevenlabs.io/v1/text-to-speech/{voice_id}"
        headers = {
            "xi-api-key": ELEVENLABS_API_KEY,
            "Content-Type": "application/json"
        }
        data = {"text": text}
        response = requests.post(url, json=data, headers=headers)
        
        if response.status_code == 200:
            audio_path = "response.mp3"
            with open(audio_path, "wb") as f:
                f.write(response.content)
            return audio_path
        else:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≥–æ–ª–æ—Å—É: {response.json()}")
            return None
    except Exception as e:
        logging.error(f"[ERROR] {e}")
        return None

# –§—É–Ω–∫—Ü—ñ—è –æ–±—Ä–æ–±–∫–∏ GPT-–≤—ñ–¥–ø–æ–≤—ñ–¥—ñ

def get_gpt_response(prompt):
    try:
        client = OpenAI(api_key=OPENAI_API_KEY)
        response = client.chat.completions.create(
            model="gpt-4", messages=[{"role": "system", "content": prompt}]
        )
        return response.choices[0].message["content"]
    except Exception as e:
        logging.error(f"GPT –ø–æ–º–∏–ª–∫–∞: {e}")
        return "–í–∏–±–∞—á, —è –Ω–µ –º–æ–∂—É –∑–∞—Ä–∞–∑ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏."

# –û–±—Ä–æ–±–∫–∞ webhook
@app.post("/webhook")
async def webhook(update: dict):
    telegram_update = types.Update(**update)
    await dp.feed_update(bot, telegram_update)
    return {"status": "ok"}

# –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start
@dp.message(Command("start"))
async def start_command(message: Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ñ—ñ–Ω–æ—á–∏–π", callback_data="voice_female"),
         InlineKeyboardButton(text="–ß–æ–ª–æ–≤—ñ—á–∏–π", callback_data="voice_male")]
    ])
    await message.answer("üî• –ü—Ä–∏–≤—ñ—Ç! –ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —ñ —è –≤—ñ–¥–ø–æ–≤—ñ–º –≥–æ–ª–æ—Å–æ–º!\n\n–í–∏–±–µ—Ä–∏ —Ç–∏–ø –≥–æ–ª–æ—Å—É:",
                         reply_markup=keyboard)

# –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –≥–æ–ª–æ—Å—É
@dp.callback_query()
async def change_voice(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if callback.data == "voice_female":
        user_voice_preferences[user_id] = "nCqaTnIbLdME87OuQaZY"
        await callback.message.answer("‚úÖ –ì–æ–ª–æ—Å –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ –ñ—ñ–Ω–æ—á–∏–π! –ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
    elif callback.data == "voice_male":
        user_voice_preferences[user_id] = "9Sj8ugvpK1DmcAXyvi3a"
        await callback.message.answer("‚úÖ –ì–æ–ª–æ—Å –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ –ß–æ–ª–æ–≤—ñ—á–∏–π! –ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
    await callback.answer()

# –û–±—Ä–æ–±–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
@dp.message()
async def handle_voice(message: Message):
    if message.voice:
        file_info = await bot.get_file(message.voice.file_id)
        file_path = file_info.file_path
        downloaded_file = await bot.download_file(file_path)
        local_audio = "input.ogg"
        with open(local_audio, "wb") as f:
            f.write(downloaded_file.read())

        gpt_response = get_gpt_response("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞–¥—ñ—Å–ª–∞–≤ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –î–∞–π –≤–µ—Å–µ–ª—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å.")
        audio_response = generate_voice(message.from_user.id, gpt_response)

        if audio_response:
            voice = FSInputFile(audio_response)
            await message.answer_voice(voice)
        else:
            await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≥–æ–ª–æ—Å—É!")

async def main():
    await bot.set_webhook(WEBHOOK_URL)
    uvicorn.run(app, host="0.0.0.0", port=8000)

if __name__ == "__main__":
    asyncio.run(main())
