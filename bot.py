import os
import logging
import asyncio
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, FSInputFile
from aiogram.filters import Command
from fastapi import FastAPI
import uvicorn

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ (API-–∫–ª—é—á—ñ)
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
ELEVENLABS_API_KEY = os.getenv("ELEVENLABS_API_KEY")
WEBHOOK_URL = f"https://fenix-bot-3w3i.onrender.com/webhook"

bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()
app = FastAPI()

# –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ API-–∫–ª—é—á –¥–æ—Å—Ç—É–ø–Ω–∏–π
print("[DEBUG] ELEVENLABS_API_KEY =", ELEVENLABS_API_KEY)

def generate_voice(text):
    try:
        voice_id = "tC4vX6Z71D2o0o0HWGWe"  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ—Ç—Ä–∏–º–∞–Ω–∏–π Voice ID
        url = f"https://api.elevenlabs.io/v1/text-to-speech/{voice_id}"

        headers = {
            "Content-Type": "application/json",
            "xi-api-key": ELEVENLABS_API_KEY  # –¢—É—Ç –º–∞—î –±—É—Ç–∏ –∫–æ—Ä–µ–∫—Ç–Ω–∏–π API-–∫–ª—é—á
        }

        data = {"text": text}
        response = requests.post(url, json=data, headers=headers)

        if response.status_code == 401:
            print(f"[ERROR] –ù–µ–≤—ñ—Ä–Ω–∏–π API-–∫–ª—é—á! –ü–µ—Ä–µ–≤—ñ—Ä API-–∫–ª—é—á —É ElevenLabs.")
            return None

        if response.status_code != 200:
            print(f"[ERROR] –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≥–æ–ª–æ—Å—É: {response.status_code}, {response.text}")
            return None

        audio_path = "response.mp3"
        with open(audio_path, "wb") as f:
            f.write(response.content)

        print(f"[LOG] –ì–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {audio_path}")
        return audio_path
    except Exception as e:
        print(f"[ERROR] –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≥–æ–ª–æ—Å—É: {e}")
        return None

@app.post("/webhook")
async def webhook(update: dict):
    try:
        telegram_update = types.Update(**update)
        await dp.feed_update(bot, telegram_update)
        print("[LOG] Webhook –æ—Ç—Ä–∏–º–∞–≤ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è:", update)
        return {"status": "ok"}
    except Exception as e:
        print(f"[ERROR] Webhook –ø–æ–º–∏–ª–∫–∞: {e}")
        return {"status": "error"}

@dp.message(Command("start"))
async def start_command(message: Message):
    await message.answer("üî• –ü—Ä–∏–≤—ñ—Ç! –ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —ñ —è –≤—ñ–¥–ø–æ–≤—ñ–º –≥–æ–ª–æ—Å–æ–º!")

@dp.message()
async def handle_voice(message: Message):
    if message.voice:
        file_info = await bot.get_file(message.voice.file_id)
        file_path = file_info.file_path
        downloaded_file = await bot.download_file(file_path)
        local_audio = "input.ogg"
        with open(local_audio, "wb") as f:
            f.write(downloaded_file.read())

        # –ì–µ–Ω–µ—Ä—É—î–º–æ –≥–æ–ª–æ—Å–æ–≤—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        audio_response = generate_voice("–ü—Ä–∏–≤—ñ—Ç! –¶–µ —Ç–µ—Å—Ç–æ–≤–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å.")

        if audio_response:
            audio_file = FSInputFile(audio_response)  # –ö–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª—É
            await message.answer_voice(audio_file)
        else:
            await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≥–æ–ª–æ—Å—É!")

async def main():
    await bot.set_webhook(WEBHOOK_URL)
    uvicorn.run(app, host="0.0.0.0", port=8000)

if __name__ == "__main__":
    asyncio.run(main())

