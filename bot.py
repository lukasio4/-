import os
import logging
import asyncio
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from fastapi import FastAPI
import uvicorn
from openai import OpenAI
from elevenlabs import generate, play, set_api_key

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
ELEVENLABS_API_KEY = os.getenv("ELEVENLABS_API_KEY")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
WEBHOOK_URL = "https://fenix-bot-3w3i.onrender.com/webhook"

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —Ç–∞ FastAPI
bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()
app = FastAPI()

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è ElevenLabs API
set_api_key(ELEVENLABS_API_KEY)

# –í–∞—Ä—ñ–∞–Ω—Ç–∏ –≥–æ–ª–æ—Å—ñ–≤
VOICES = {
    "–ñ—ñ–Ω–æ—á–∏–π": "nCqaTnIbLdME87OuQaZY",  # –í—ñ—Ä–∞
    "–ß–æ–ª–æ–≤—ñ—á–∏–π": "9Sj8ugvpK1DmcAXyvi3a"  # –û–ª–µ–∫—Å—ñ–π –ù–µ–∫—Ä–∞—Å–æ–≤
}
user_voices = {}

# –§—É–Ω–∫—Ü—ñ—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≥–æ–ª–æ—Å—É
def generate_voice(text, voice_id):
    try:
        audio = generate(
            text=text,
            voice=voice_id,
            model="eleven_multilingual_v1"
        )
        audio_path = "response.mp3"
        with open(audio_path, "wb") as f:
            f.write(audio)
        return audio_path
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≥–æ–ª–æ—Å—É: {e}")
        return None

# –§—É–Ω–∫—Ü—ñ—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ GPT
def get_gpt_response(prompt):
    try:
        client = OpenAI(api_key=OPENAI_API_KEY)
        response = client.Completion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "system", "content": "–¢–∏ –≤–µ—Å–µ–ª–∏–π –ø–æ–º—ñ—á–Ω–∏–∫!"},
                      {"role": "user", "content": prompt}]
        )
        return response["choices"][0]["message"]["content"]
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ GPT: {e}")
        return "–í–∏–±–∞—á, —è –Ω–µ –∑–º—ñ–≥ –∑—Ä–æ–∑—É–º—ñ—Ç–∏ –∑–∞–ø–∏—Ç."

@app.post("/webhook")
async def webhook(update: dict):
    try:
        telegram_update = types.Update(**update)
        await dp.feed_update(bot, telegram_update)
        return {"status": "ok"}
    except Exception as e:
        logging.error(f"Webhook –ø–æ–º–∏–ª–∫–∞: {e}")
        return {"status": "error"}

@dp.message(Command("start"))
async def start_command(message: Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton("–ñ—ñ–Ω–æ—á–∏–π"), KeyboardButton("–ß–æ–ª–æ–≤—ñ—á–∏–π")]],
        resize_keyboard=True
    )
    await message.answer("üî• –ü—Ä–∏–≤—ñ—Ç! –ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —ñ —è –≤—ñ–¥–ø–æ–≤—ñ–º –≥–æ–ª–æ—Å–æ–º!\n\n–í–∏–±–µ—Ä–∏ —Ç–∏–ø –≥–æ–ª–æ—Å—É:",
                         reply_markup=keyboard)

@dp.message()
async def handle_voice(message: Message):
    if message.text in VOICES:
        user_voices[message.from_user.id] = VOICES[message.text]
        await message.answer(f"‚úÖ –ì–æ–ª–æ—Å –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {message.text}! –ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
        return
    
    if message.voice:
        file_info = await bot.get_file(message.voice.file_id)
        file_path = file_info.file_path
        downloaded_file = await bot.download_file(file_path)
        local_audio = "input.ogg"
        with open(local_audio, "wb") as f:
            f.write(downloaded_file.read())
        
        text_response = get_gpt_response("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —Å–∫–∞–∑–∞–≤: [–≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è]")
        voice_id = user_voices.get(message.from_user.id, VOICES["–ñ—ñ–Ω–æ—á–∏–π"])
        audio_response = generate_voice(text_response, voice_id)

        if audio_response:
            with open(audio_response, "rb") as audio:
                await message.answer_voice(audio)
        else:
            await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≥–æ–ª–æ—Å—É!")

async def main():
    await bot.set_webhook(WEBHOOK_URL)
    uvicorn.run(app, host="0.0.0.0", port=8000)

if __name__ == "__main__":
    asyncio.run(main())
